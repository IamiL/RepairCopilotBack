syntax = "proto3";

package user.v1;

option go_package = "user/v1";

import "google/protobuf/timestamp.proto";

// UserService определяет сервис для работы с пользователями
service UserService {
  // GetUserInfo получает информацию о пользователе по ID
  rpc GetUserInfo(GetUserInfoRequest) returns (GetUserInfoResponse);

  // RegisterUser регистрирует нового пользователя
  rpc RegisterUser(RegisterUserRequest) returns (RegisterUserResponse);

  // Login выполняет аутентификацию пользователя
  rpc Login(LoginRequest) returns (LoginResponse);

  // GetLoginById получает логин пользователя по ID
  rpc GetLoginById(GetLoginByIdRequest) returns (GetLoginByIdResponse);

  // GetUserByLogin получает информацию о пользователе по логину
  rpc GetUserByLogin(GetUserByLoginRequest) returns (GetUserByLoginResponse);

  // GetAllUsers получает список всех пользователей
  rpc GetAllUsers(GetAllUsersRequest) returns (GetAllUsersResponse);
  
  // GetUserDetailsById получает все поля пользователя по ID (включая updated_at)
  rpc GetUserDetailsById(GetUserDetailsByIdRequest) returns (GetUserDetailsByIdResponse);
}

// GetUserInfoRequest запрос для получения информации о пользователе по ID
message GetUserInfoRequest {
  string user_id = 1;           // UUID пользователя
}

// GetUserInfoResponse ответ с подробной информацией о пользователе
message GetUserInfoResponse {
  string first_name = 1;         // Имя пользователя
  string last_name = 2;          // Фамилия пользователя
  string email = 3;
  string login = 4;
  bool is_admin1 = 5;            // Флаг администратора 1
  bool is_admin2 = 6;            // Флаг администратора 2
  google.protobuf.Timestamp registered_at = 7;
  google.protobuf.Timestamp last_visit_at = 8;
  uint32 inspections_count = 9;
  uint32 error_feedback_count = 10;
  uint32 inspections_per_day = 11;
  uint32 Inspections_for_today = 12;
  bool is_confirmed = 13;
}

// RegisterUserRequest содержит данные для регистрации пользователя
message RegisterUserRequest {
  string login = 1;         // Логин пользователя
  string password = 2;      // Пароль пользователя
  string first_name = 3;          // Имя пользователя
  string last_name = 4;       // Фамилия пользователя
  string email = 5;         // Email пользователя
}

// RegisterUserResponse содержит результат регистрации
message RegisterUserResponse {
  string user_id = 1;       // UUID зарегистрированного пользователя
}

// LoginRequest содержит данные для аутентификации
message LoginRequest {
  string login = 1;         // Логин пользователя
  string password = 2;      // Пароль пользователя
}

// LoginResponse содержит результат аутентификации
message LoginResponse {
  string user_id = 1;       // UUID аутентифицированного пользователя
  bool  is_admin1 = 2;
  bool is_admin2 = 3;
}

// GetLoginByIdRequest содержит ID пользователя для получения логина
message GetLoginByIdRequest {
  string user_id = 1;       // UUID пользователя
}

// GetLoginByIdResponse содержит логин пользователя
message GetLoginByIdResponse {
  string login = 1;         // Логин пользователя
}

// GetUserByLoginRequest содержит логин для получения информации о пользователе
message GetUserByLoginRequest {
  string login = 1;         // Логин пользователя
}

// GetUserByLoginResponse содержит информацию о пользователе
message GetUserByLoginResponse {
  string user_id = 1;       // UUID пользователя
  string login = 2;         // Логин пользователя
  bool is_admin1 = 3;       // Флаг администратора 1
  bool is_admin2 = 4;       // Флаг администратора 2
  string name = 5;          // Имя пользователя
  string surname = 6;       // Фамилия пользователя
  string email = 7;         // Email пользователя
}

// GetAllUsersRequest запрос для получения всех пользователей
message GetAllUsersRequest {
  // Пустой запрос - получаем всех пользователей
}

// UserInfo информация о пользователе
message UserInfo {
  string user_id = 1;       // UUID пользователя
  string login = 2;         // Логин пользователя
  bool is_admin1 = 3;       // Флаг администратора 1
  bool is_admin2 = 4;       // Флаг администратора 2
  string name = 5;          // Имя пользователя
  string surname = 6;       // Фамилия пользователя
  string email = 7;         // Email пользователя
}

// GetAllUsersResponse ответ со списком всех пользователей
message GetAllUsersResponse {
  repeated UserInfo users = 1; // Массив пользователей
}

// GetUserDetailsByIdRequest запрос для получения всех полей пользователя по ID
message GetUserDetailsByIdRequest {
  string user_id = 1;           // UUID пользователя
}

// GetUserDetailsByIdResponse ответ со всеми полями пользователя
message GetUserDetailsByIdResponse {
  string user_id = 1;           // UUID пользователя
  string login = 2;             // Логин пользователя
  bool is_admin1 = 3;           // Флаг администратора 1
  bool is_admin2 = 4;           // Флаг администратора 2
  string created_at = 5;        // Дата и время регистрации в RFC3339 формате
  string updated_at = 6;        // Дата и время последнего обновления в RFC3339 формате
  string name = 7;              // Имя пользователя
  string surname = 8;           // Фамилия пользователя
  string email = 9;             // Email пользователя
}
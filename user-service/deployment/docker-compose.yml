networks:
  common:
    external: true
    name: common

services:
  postgres:
    image: postgres:15 # Образ Postgres версии 15
    container_name: user-service-postgres # Имя контейнера базы данных
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=128MB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    environment:
      POSTGRES_DB: ${USER_SERVICE_POSTGRES_DB_NAME}
      POSTGRES_USER: ${USER_SERVICE_POSTGRES_USER} # Пользователь базы данных из .env
      POSTGRES_PASSWORD: ${USER_SERVICE_POSTGRES_PASS} # Пароль базы данных из .env
    ports:
      - "${USER_SERVICE_POSTGRES_PORT}:5432" # Пробрасываем порт: внешний из .env, внутренний фиксированный
    volumes:
      - user-service-pg-volume:/var/lib/postgresql/data # Volume для сохранности данных базы
    healthcheck: # Проверяем "здоровье" контейнера базы
      test: [ "CMD-SHELL", "pg_isready -U ${USER_SERVICE_POSTGRES_USER} -d ${USER_SERVICE_POSTGRES_DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped # Автоматический перезапуск контейнера, кроме ручной остановки
    networks:
      - common

  app:
    build:
      context: ../.. # Контекст сборки приложения — корень проекта (где go.mod)
      dockerfile: user-service/deployment/Dockerfile # Путь к Dockerfile от корня проекта
    container_name: user-service # Имя контейнера приложения
    labels:
      logging: promtail
      prometheus-job: true
    ports:
      - "${USER_SERVICE_PORT}:8080" # Внешний порт из .env, внутренний фиксированный 8080
    environment:
      env: "${ENV}"
      GRPC_PORT: ":8080" # Порт gRPC сервера внутри контейнера (фиксированный)
      POSTGRES_HOST: "user-service-postgres"
      POSTGRES_PORT: "5432" # Внутренний порт Postgres в Docker сети (фиксированный)
      POSTGRES_DB_NAME: "${USER_SERVICE_POSTGRES_DB_NAME}"
      POSTGRES_USER: "${USER_SERVICE_POSTGRES_USER}"
      POSTGRES_PASSWORD: "${USER_SERVICE_POSTGRES_PASS}"
      POSTGRES_MIGRATIONS_DIR: "migrations" # Директория миграций
      MAIL_TOKEN: "${RESEND_MAIL_TOKEN}"
      MAIL_DOMEN: ${RESEND_MAIL_DOMAIN}
    depends_on:
      postgres:
        condition: service_healthy # Ждём, пока база станет "здоровой", прежде чем стартовать приложение
    restart: unless-stopped # Автоматический перезапуск приложения
    # Сеть можно оставить для расширяемости проекта
    networks:
      - common

volumes:
  user-service-pg-volume: # Volume для данных базы, Docker создаст его автоматически
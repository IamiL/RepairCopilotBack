networks:
  common:
    external: true
    name: common

services:
  postgres:
    image: postgres:15 # Образ Postgres версии 15
    container_name: api-gateway-service-postgres # Имя контейнера базы данных
#    env_file:
#      - ../../.env # Загружаем переменные из .env в корне проекта
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=128MB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    environment:
      POSTGRES_DB: ${API_GATEWAY_SERVICE_POSTGRES_DB_NAME}
      POSTGRES_USER: ${API_GATEWAY_SERVICE_POSTGRES_USER} # Пользователь базы данных из .env
      POSTGRES_PASSWORD: ${API_GATEWAY_SERVICE_POSTGRES_PASS} # Пароль базы данных из .env
    ports:
      - "${API_GATEWAY_SERVICE_POSTGRES_PORT}:5432" # Пробрасываем порт: внешний из .env, внутренний фиксированный
    volumes:
      - api-gateway-service-pg-volume:/var/lib/postgresql/data # Volume для сохранности данных базы
    healthcheck: # Проверяем "здоровье" контейнера базы
      test: [ "CMD-SHELL", "pg_isready -U ${API_GATEWAY_SERVICE_POSTGRES_USER} -d ${API_GATEWAY_SERVICE_POSTGRES_DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped # Автоматический перезапуск контейнера, кроме ручной остановки
    networks:
      - common

  redis:
    image: redis:7.4-alpine
    container_name: api-gateway-service-redis
#    env_file:
#      - ../../.env # Загружаем переменные из .env в корне проекта
    restart: unless-stopped
    ports:
      - "${API_GATEWAY_SERVICE_REDIS_PORT}:6379"
    command: >
      --requirepass ${API_GATEWAY_SERVICE_REDIS_PASS}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - api-gateway-service-redis-data:/data
      - ./redis-config:/usr/local/etc/redis
    networks:
      - common
    environment:
      REDIS_PASSWORD: "${API_GATEWAY_SERVICE_REDIS_PASS}"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -a \"$$REDIS_PASSWORD\" PING | grep -q PONG" ]

  redis-insight:
    image: redis/redisinsight:latest
    container_name: api-gateway-service-redis-insight
#    env_file:
#      - ../../.env # Загружаем переменные из .env в корне проекта
    restart: unless-stopped
    ports:
      - "${API_GATEWAY_SERVICE_REDIS_INSIGHT_PORT}:5540"
    volumes:
      - api-gateway-service-redis-insight-data:/data
    networks:
      - common
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - RI_LOG_LEVEL=info
      - RI_FILES_LOGGER=true

  app:
    build:
      context: ../.. # Контекст сборки приложения — корень проекта (где go.mod)
      dockerfile: api-gateway-service/deployment/Dockerfile # Путь к Dockerfile от корня проекта
    container_name: api-gateway-service # Имя контейнера приложения
#    env_file:
#      - ../../.env # Загружаем переменные из .env в корне проекта
    ports:
      - "${API_GATEWAY_SERVICE_PORT}:8080" # Внешний порт из .env, внутренний фиксированный 8080
    environment:
      HTTP_PORT: "8080" # Порт приложения внутри контейнера (фиксированный)
      HTTP_TIMEOUT: "1000s"
      POSTGRES_HOST: "api-gateway-service-postgres"
      POSTGRES_PORT: "5432" # Внутренний порт Postgres в Docker сети (фиксированный)
      POSTGRES_DB_NAME: "${API_GATEWAY_SERVICE_POSTGRES_DB_NAME}"
      POSTGRES_USER: "${API_GATEWAY_SERVICE_POSTGRES_USER}"
      POSTGRES_PASSWORD: "${API_GATEWAY_SERVICE_POSTGRES_PASS}"
      POSTGRES_MIGRATIONS_DIR: "migrations" # Директория миграций
      REDIS_ADDR: "api-gateway-service-redis:6379" # Внутренний порт Redis в Docker сети (фиксированный)
      REDIS_PASS: "${API_GATEWAY_SERVICE_REDIS_PASS}"
      USER_SERVICE_LOCATION: "user-service:8080"
      TZ_SERVICE_LOCATION: "tz-service:${TZ_SERVICE_PORT}"
      CHAT_POCHEMU_SERVICE_LOCATION: "chat-pochemu-service:${CHAT_POCHEMU_SERVICE_PORT}"
      CHAT_SEARCH_SERVICE_LOCATION: "chat-search-service:${CHAT_SEARCH_SERVICE_PORT}"
    depends_on:
      postgres:
        condition: service_healthy # Ждём, пока база станет "здоровой", прежде чем стартовать приложение
      redis:
        condition: service_healthy # Ждём, пока база станет "здоровой", прежде чем стартовать приложение
    restart: unless-stopped # Автоматический перезапуск приложения
    # Сеть можно оставить для расширяемости проекта
    networks:
      - common

volumes:
  api-gateway-service-pg-volume: # Volume для данных базы, Docker создаст его автоматически
  api-gateway-service-redis-data:
  api-gateway-service-redis-insight-data:
package telegram

import (
	"repairCopilotBot/telegram-bot/internal/domain/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// KeyboardManager —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
type KeyboardManager struct {
	keyboards map[models.UserStateEnum]tgbotapi.ReplyKeyboardMarkup
}

// NewKeyboardManager —Å–æ–∑–¥–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä
func NewKeyboardManager() *KeyboardManager {
	km := &KeyboardManager{
		keyboards: make(map[models.UserStateEnum]tgbotapi.ReplyKeyboardMarkup),
	}

	// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	km.keyboards[models.StateUnauthorized] = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîë –í–æ–π—Ç–∏"),
		),
	)

	// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ª–æ–≥–∏–Ω–∞
	km.keyboards[models.StateAwaitingLogin] = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"),
		),
	)

	// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è
	km.keyboards[models.StateAwaitingPassword] = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"),
		),
	)

	// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	km.keyboards[models.StateAuthorized] = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üí¨ –ù–∞—á–∞—Ç—å —á–∞—Ç"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"),
		),
	)

	// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ –≤—Ä–µ–º—è —á–∞—Ç–∞
	km.keyboards[models.StateInChat] = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç"),
		),
	)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	for state := range km.keyboards {
		keyboard := km.keyboards[state]
		keyboard.ResizeKeyboard = true
		keyboard.OneTimeKeyboard = false
		km.keyboards[state] = keyboard
	}

	return km
}

// GetKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
func (km *KeyboardManager) GetKeyboard(state models.UserStateEnum) tgbotapi.ReplyKeyboardMarkup {
	if keyboard, exists := km.keyboards[state]; exists {
		return keyboard
	}
	// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
	return km.keyboards[models.StateUnauthorized]
}

// RemoveKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
func (km *KeyboardManager) RemoveKeyboard() tgbotapi.ReplyKeyboardRemove {
	return tgbotapi.NewRemoveKeyboard(true)
}

// ParseButtonCommand –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–º–∞–Ω–¥—É
func ParseButtonCommand(text string) string {
	buttonToCommand := map[string]string{
		"üîë –í–æ–π—Ç–∏":         "login",
		"üí¨ –ù–∞—á–∞—Ç—å —á–∞—Ç":    "startchat",
		"üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç": "endchat",
		"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":      "cancel",
		"üîÑ –°–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç": "login",
	}

	if command, exists := buttonToCommand[text]; exists {
		return command
	}

	return ""
}
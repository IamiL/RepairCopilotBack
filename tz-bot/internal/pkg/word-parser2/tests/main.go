package main

import (
	"fmt"
	"os"
	"regexp"
	"strconv"
	"strings"
)

const paragraphPlaceholder = "{{PARAGRAPHS_PLACEHOLDER_{{ARTICLE_INDEX}}}}"

// extractChildBlocks –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–µ –±–ª–æ–∫–∏ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç–∞—Ç—å–∏
func extractChildBlocks(articleContent string, articleIndex int) string {
	var result strings.Builder

	// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä—è–º—ã–µ –¥–æ—á–µ—Ä–Ω–∏–µ –±–ª–æ–∫–∏ –≤–µ—Ä—Ö–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
	blockRegex := regexp.MustCompile(`(?s)<(\w+)([^>]*)>(.*?)</(\w+)>`)
	blockMatches := blockRegex.FindAllStringSubmatch(articleContent, -1)

	blockIndex := 0
	for _, blockMatch := range blockMatches {
		tagName := blockMatch[1]
		existingAttrs := blockMatch[2]
		blockContent := blockMatch[3]
		closingTag := blockMatch[4]

		// Skip if opening and closing tags don't match
		if tagName != closingTag {
			continue
		}

		// Add special attributes for tracking
		newAttrs := fmt.Sprintf(`%s data-article="%d" data-block="%d"`, existingAttrs, articleIndex, blockIndex)
		processedBlock := fmt.Sprintf(`<%s%s>%s</%s>`, tagName, newAttrs, blockContent, tagName)
		result.WriteString(processedBlock)

		blockIndex++
	}

	return result.String()
}

// ParagraphExtractionResult represents the result of paragraph extraction
type ParagraphExtractionResult struct {
	HTMLWithPlaceholder string
	Paragraphs          string
}

// ExtractParagraphs extracts paragraphs from multiple articles with numbering
func ExtractParagraphs(html string) ParagraphExtractionResult {
	// Regular expression to find all article elements with their content (multiline mode)
	articleRegex := regexp.MustCompile(`(?s)<article[^>]*>(.*?)</article>`)
	articleMatches := articleRegex.FindAllStringSubmatch(html, -1)

	if len(articleMatches) == 0 {
		return ParagraphExtractionResult{
			HTMLWithPlaceholder: html,
			Paragraphs:          "",
		}
	}

	var allParagraphs strings.Builder
	htmlWithPlaceholder := html

	// Process articles in reverse order to avoid position shifts
	for i := len(articleMatches) - 1; i >= 0; i-- {
		match := articleMatches[i]
		articleContent := match[1]

		// Extract all child blocks from the article content using a more sophisticated approach
		extractedBlocks := extractChildBlocks(articleContent, i)
		allParagraphs.WriteString(extractedBlocks)

		// Extract original article attributes
		fullArticleMatch := match[0]
		articleTagRegex := regexp.MustCompile(`<article([^>]*)>`)
		articleTagMatch := articleTagRegex.FindStringSubmatch(fullArticleMatch)

		var articleAttrs string
		if len(articleTagMatch) >= 2 {
			articleAttrs = articleTagMatch[1]
		}

		// Replace this specific article with numbered placeholder, preserving attributes
		placeholder := strings.ReplaceAll(paragraphPlaceholder, "{{ARTICLE_INDEX}}", fmt.Sprintf("%d", i))
		htmlWithPlaceholder = strings.Replace(htmlWithPlaceholder, fullArticleMatch, fmt.Sprintf("<article%s>%s</article>", articleAttrs, placeholder), 1)
	}

	//fmt.Println("–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ extractParagraphs: paragraphs = ", allParagraphs.String())

	return ParagraphExtractionResult{
		HTMLWithPlaceholder: htmlWithPlaceholder,
		Paragraphs:          allParagraphs.String(),
	}
}

// InsertParagraphs inserts paragraphs back into HTML replacing numbered placeholders
func InsertParagraphs(htmlWithPlaceholder, paragraphs string) string {
	// Parse all blocks from paragraphs string to organize by article
	blockRegex := regexp.MustCompile(`<(\w+)[^>]*data-article="(\d+)"[^>]*data-block="(\d+)"[^>]*>([\s\S]*?)</(\w+)>`)
	blockMatches := blockRegex.FindAllStringSubmatch(paragraphs, -1)

	// Group blocks by article index
	articleBlocks := make(map[int][]string)
	for _, match := range blockMatches {
		articleIndex := 0
		fmt.Sscanf(match[2], "%d", &articleIndex)
		blockIndex := 0
		fmt.Sscanf(match[3], "%d", &blockIndex)

		// Check if opening and closing tags match
		tagName := match[1]
		closingTag := match[5]
		if tagName != closingTag {
			continue
		}

		// Remove the special attributes from the block
		blockContent := match[4]

		// Extract original attributes by removing data-article and data-block
		fullMatch := match[0]
		startTagRegex := regexp.MustCompile(`<` + tagName + `([^>]*)>`)
		startTagMatch := startTagRegex.FindStringSubmatch(fullMatch)

		var originalAttrs string
		if len(startTagMatch) >= 2 {
			allAttrs := startTagMatch[1]
			// Remove the special tracking attributes
			allAttrs = regexp.MustCompile(`\s+data-article="[^"]*"`).ReplaceAllString(allAttrs, "")
			allAttrs = regexp.MustCompile(`\s+data-block="[^"]*"`).ReplaceAllString(allAttrs, "")
			originalAttrs = strings.TrimSpace(allAttrs)
		}

		// Reconstruct block without special attributes
		var cleanBlock string
		if originalAttrs != "" {
			cleanBlock = fmt.Sprintf(`<%s %s>%s</%s>`, tagName, originalAttrs, blockContent, tagName)
		} else {
			cleanBlock = fmt.Sprintf(`<%s>%s</%s>`, tagName, blockContent, tagName)
		}

		if articleBlocks[articleIndex] == nil {
			articleBlocks[articleIndex] = make([]string, 0)
		}

		// Insert block at correct position
		for len(articleBlocks[articleIndex]) <= blockIndex {
			articleBlocks[articleIndex] = append(articleBlocks[articleIndex], "")
		}
		articleBlocks[articleIndex][blockIndex] = cleanBlock
	}

	result := htmlWithPlaceholder

	// Replace each numbered placeholder with corresponding article content
	for articleIndex, blocks := range articleBlocks {
		placeholder := strings.ReplaceAll(paragraphPlaceholder, "{{ARTICLE_INDEX}}", fmt.Sprintf("%d", articleIndex))
		articleContent := strings.Join(blocks, "")

		result = strings.ReplaceAll(result, placeholder, articleContent)
	}

	return result
}

// runTestScenario –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
func runTestScenario(html, scenarioName string) {
	fmt.Printf("\n--- –°—Ü–µ–Ω–∞—Ä–∏–π: %s ---\n", scenarioName)
	fmt.Println("–ò—Å—Ö–æ–¥–Ω—ã–π HTML:")
	fmt.Println(html)

	// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
	result := ExtractParagraphs(html)

	fmt.Println("\nHTML —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏:")
	fmt.Println(result.HTMLWithPlaceholder)

	fmt.Println("\n–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã:")
	fmt.Println(result.Paragraphs)

	// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
	restored := InsertParagraphs(result.HTMLWithPlaceholder, result.Paragraphs)

	fmt.Println("\n–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π HTML:")
	fmt.Println(restored)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ (–±–∞–∑–æ–≤–∞—è)
	if len(result.Paragraphs) > 0 {
		fmt.Println("\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª: –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
	} else {
		fmt.Println("\n‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
	}

	fmt.Println("\n" + strings.Repeat("=", 60))
}

func main() {
	if len(os.Args) < 2 {
		showUsage()
		return
	}

	arg := os.Args[1]

	if arg == "all" {
		fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
		runAllTests()
		fmt.Println("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
		return
	}

	scenarioNumber, err := strconv.Atoi(arg)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞: '%s' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º\n", arg)
		return
	}

	if scenarioNumber < 1 || scenarioNumber > 6 {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 6")
		return
	}

	fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è %d...\n", scenarioNumber)
	runSingleTest(scenarioNumber)
	fmt.Println("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
}

func showUsage() {
	fmt.Println("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:")
	fmt.Println("1 - –ü—Ä–æ—Å—Ç—ã–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏")
	fmt.Println("2 - –°–ª–æ–∂–Ω–∞—è –≤–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
	fmt.Println("3 - –û–¥–Ω–∞ —Å—Ç–∞—Ç—å—è")
	fmt.Println("4 - –ë–µ–∑ —Å—Ç–∞—Ç–µ–π")
	fmt.Println("5 - –ü—É—Å—Ç—ã–µ —Å—Ç–∞—Ç—å–∏")
	fmt.Println("6 - –°—Ç–∞—Ç—å–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –∞—Ç—Ä–∏–±—É—Ç–æ–≤")
	fmt.Println("all - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã")
	fmt.Println()
	fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
	fmt.Println("  go run tests/main.go 1          # –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç 1")
	fmt.Println("  go run tests/main.go all        # –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã")
	fmt.Println("  go test -v                      # –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ—Å—Ç—ã")
}

func runAllTests() {
	for i := 1; i <= 6; i++ {
		runSingleTest(i)
	}
}

func runSingleTest(scenarioNumber int) {
	switch scenarioNumber {
	case 1:
		testScenario1()
	case 2:
		testScenario2()
	case 3:
		testScenario3()
	case 4:
		testScenario4()
	case 5:
		testScenario5()
	case 6:
		testScenario6()
	default:
		fmt.Println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ: 1-6")
	}
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
func testScenario1() {
	fmt.Println("\n=== –¢–ï–°–¢ 1: –ü—Ä–æ—Å—Ç—ã–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ ===")

	testHTML := `<div>
		<section>
			<article class="doc-article">
				<p>—Ç–µ–∫—Å—Ç 1</p>
				<p>—Ç–µ–∫—Å—Ç 2</p>
				<table border="1">—Ç–∞–±–ª–∏—Ü–∞ 1</table>
			</article>
		</section>
		<section class="lallala">
			<article class="lallala" id="second-article">
				<p>—Ç–µ–∫—Å—Ç 4</p>
				<table class="table-2">—Ç–∞–±–ª–∏—Ü–∞ 2</table>
			</article>
			<footer>–∫–∞–∫–æ–π-—Ç–æ —Ñ—É—Ç–µ—Ä</footer>
		</section>
	</div>`

	runTestScenario(testHTML, "–ü—Ä–æ—Å—Ç—ã–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏")
}

func testScenario2() {
	fmt.Println("\n=== –¢–ï–°–¢ 2: –°–ª–æ–∂–Ω–∞—è –≤–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ===")

	testHTML := `<div class="document">
		<header>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞</header>
		<main>
			<section class="chapter1">
				<article data-id="art1" class="content-block">
					<h2>–†–∞–∑–¥–µ–ª 1</h2>
					<p class="intro">–í–≤–µ–¥–µ–Ω–∏–µ –∫ –ø–µ—Ä–≤–æ–º—É —Ä–∞–∑–¥–µ–ª—É</p>
					<div class="subsection">
						<p>–ü–æ–¥—Ä–∞–∑–¥–µ–ª 1.1</p>
						<ul>
							<li>–ü—É–Ω–∫—Ç 1</li>
							<li>–ü—É–Ω–∫—Ç 2</li>
						</ul>
					</div>
					<table class="data-table" border="1" cellpadding="5">
						<tr><th>–ö–æ–ª–æ–Ω–∫–∞ 1</th><th>–ö–æ–ª–æ–Ω–∫–∞ 2</th></tr>
						<tr><td>–î–∞–Ω–Ω—ã–µ 1</td><td>–î–∞–Ω–Ω—ã–µ 2</td></tr>
					</table>
				</article>
			</section>
			<section class="chapter2">
				<article id="second" data-type="content">
					<h2>–†–∞–∑–¥–µ–ª 2</h2>
					<p style="color: blue;">–¶–≤–µ—Ç–Ω–æ–π —Ç–µ–∫—Å—Ç</p>
					<blockquote cite="source">
						–¶–∏—Ç–∞—Ç–∞ –∏–∑ –∫–∞–∫–æ–≥–æ-—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
					</blockquote>
				</article>
			</section>
		</main>
	</div>`

	runTestScenario(testHTML, "–°–ª–æ–∂–Ω–∞—è –≤–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
}

func testScenario3() {
	fmt.Println("\n=== –¢–ï–°–¢ 3: –û–¥–Ω–∞ —Å—Ç–∞—Ç—å—è ===")

	testHTML := `<div>
		<section>
			<article class="single-article">
				<h1>–ó–∞–≥–æ–ª–æ–≤–æ–∫</h1>
				<p>–ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ</p>
				<p>–í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ</p>
				<div class="content-block">
					<span>–í–ª–æ–∂–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç</span>
				</div>
			</article>
		</section>
	</div>`

	runTestScenario(testHTML, "–û–¥–Ω–∞ —Å—Ç–∞—Ç—å—è")
}

func testScenario4() {
	fmt.Println("\n=== –¢–ï–°–¢ 4: –ë–µ–∑ —Å—Ç–∞—Ç–µ–π ===")

	testHTML := `<div>
		<section>
			<p>–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –±–µ–∑ article</p>
			<div>–û–±—ã—á–Ω—ã–π div</div>
		</section>
	</div>`

	runTestScenario(testHTML, "–ë–µ–∑ —Å—Ç–∞—Ç–µ–π")
}

func testScenario5() {
	fmt.Println("\n=== –¢–ï–°–¢ 5: –ü—É—Å—Ç—ã–µ —Å—Ç–∞—Ç—å–∏ ===")

	testHTML := `<div>
		<section>
			<article class="empty1"></article>
			<article class="empty2">
			</article>
			<article class="with-content">
				<p>–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç</p>
			</article>
		</section>
	</div>`

	runTestScenario(testHTML, "–ü—É—Å—Ç—ã–µ —Å—Ç–∞—Ç—å–∏")
}

func testScenario6() {
	fmt.Println("\n=== –¢–ï–°–¢ 6: –°—Ç–∞—Ç—å–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –∞—Ç—Ä–∏–±—É—Ç–æ–≤ ===")

	testHTML := `<div>
		<section>
			<article 
				id="complex-article" 
				class="main-article featured"
				data-category="news" 
				data-published="2024-01-01"
				style="margin: 10px; padding: 20px;"
				role="main"
				aria-labelledby="title1">
				<h2 id="title1" class="article-title">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏</h2>
				<p class="lead-paragraph" data-priority="high">–í–∞–∂–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ</p>
				<table 
					class="responsive-table"
					id="data-table-1"
					data-sortable="true"
					border="1"
					cellpadding="10"
					cellspacing="0">
					<thead>
						<tr><th>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã</th></tr>
					</thead>
					<tbody>
						<tr><td>–î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã</td></tr>
					</tbody>
				</table>
			</article>
		</section>
	</div>`

	runTestScenario(testHTML, "–°—Ç–∞—Ç—å–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –∞—Ç—Ä–∏–±—É—Ç–æ–≤")
}

package tgapp

import (
	"context"
	"fmt"
	"log/slog"
	"net/http"
	"repairCopilotBot/tz-bot/internal/pkg/logger/sl"
	"strconv"
	"time"

	"repairCopilotBot/tz-bot/internal/config"
	tzservice "repairCopilotBot/tz-bot/internal/service/tz"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

type App struct {
	bot         *bot.Bot
	config      *config.TelegramBotConfig
	tzService   TZServiceInterface
	log         *slog.Logger
	ctx         context.Context
	cancel      context.CancelFunc
	waitingGGID map[int64]bool
}

type TZServiceInterface interface {
	SetGGID(newGGID int) int
	GetGGID() int
	SetUseLlmCache(useLlmCache bool) bool
	GetUseLlmCache() bool
}

func New(log *slog.Logger, config *config.TelegramBotConfig, tzService *tzservice.Tz) (*App, error) {
	ctx, cancel := context.WithCancel(context.Background())

	opts := []bot.Option{
		bot.WithDefaultHandler(func(ctx context.Context, b *bot.Bot, update *models.Update) {
			log.Debug("–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
				slog.Any("update", update))
		}),
	}

	b, err := bot.New(config.Token, opts...)
	if err != nil {
		log.Error("failed to create telegram bot", "error", sl.Err(err))
		cancel()
		return nil, fmt.Errorf("failed to create bot: %w", err)
	}

	app := &App{
		bot:         b,
		config:      config,
		tzService:   tzService,
		log:         log,
		ctx:         ctx,
		cancel:      cancel,
		waitingGGID: make(map[int64]bool),
	}

	app.registerHandlers()

	return app, nil
}

func (a *App) Start() error {
	a.log.Info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
	err := a.sendStartupMessage()
	if err != nil {
		a.log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ", slog.Any("error", err))
	}

	if a.config.UseWebhooks {
		return a.startWebhook()
	}

	go a.bot.Start(a.ctx)
	a.log.Info("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω (long polling)")
	return nil
}

func (a *App) Stop() error {
	a.log.Info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram-–±–æ—Ç–∞")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
	err := a.sendShutdownMessage()
	if err != nil {
		a.log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ", slog.Any("error", err))
	}

	a.cancel()
	return nil
}

func (a *App) startWebhook() error {
	a.log.Info("–ó–∞–ø—É—Å–∫ webhook —Ä–µ–∂–∏–º–∞",
		slog.String("host", a.config.WebhookHost),
		slog.Int("port", a.config.WebhookPort),
		slog.String("path", a.config.WebhookPath))

	go func() {
		err := http.ListenAndServe(fmt.Sprintf(":%d", a.config.WebhookPort), a.bot.WebhookHandler())
		if err != nil {
			a.log.Error("–û—à–∏–±–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞", slog.Any("error", err))
		}
	}()

	a.bot.StartWebhook(a.ctx)
	return nil
}

func (a *App) registerHandlers() {
	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
	a.bot.RegisterHandler(bot.HandlerTypeMessageText, "/start", bot.MatchTypeCommand, a.handleStart)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
	a.bot.RegisterHandler(bot.HandlerTypeMessageText, "/status", bot.MatchTypeCommand, a.handleStatus)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
	a.bot.RegisterHandler(bot.HandlerTypeCallbackQueryData, "", bot.MatchTypePrefix, a.handleCallbackQuery)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –≤–≤–æ–¥–∞ ggID)
	a.bot.RegisterHandler(bot.HandlerTypeMessageText, "", bot.MatchTypeContains, a.handleTextMessage)
}

func (a *App) handleStart(ctx context.Context, b *bot.Bot, update *models.Update) {
	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{Text: "üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", CallbackData: "status"},
			},
			{
				{Text: "üî¢ –ò–∑–º–µ–Ω–∏—Ç—å ggID", CallbackData: "change_ggid"},
				{Text: "üíæ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫—ç—à", CallbackData: "toggle_cache"},
			},
		},
	}

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text: `ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π TZ Bot</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è TZ Bot!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ ggID –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫—ç—à–∞ LLM

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
		ParseMode:   models.ParseModeHTML,
		ReplyMarkup: keyboard,
	})

	if err != nil {
		a.log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è start", slog.Any("error", err))
	}
}

func (a *App) handleStatus(ctx context.Context, b *bot.Bot, update *models.Update) {
	currentGGID := a.tzService.GetGGID()
	currentCache := a.tzService.GetUseLlmCache()

	cacheIcon := "‚ùå"
	cacheStatus := "–í—ã–∫–ª—é—á–µ–Ω"
	if currentCache {
		cacheIcon = "‚úÖ"
		cacheStatus = "–í–∫–ª—é—á–µ–Ω"
	}

	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{Text: "üî¢ –ò–∑–º–µ–Ω–∏—Ç—å ggID", CallbackData: "change_ggid"},
				{Text: "üíæ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫—ç—à", CallbackData: "toggle_cache"},
			},
		},
	}

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text: fmt.Sprintf(`üìä <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>

üî¢ <b>ggID:</b> <code>%d</code>
%s <b>–ö—ç—à LLM:</b> %s

<i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: %s</i>`,
			currentGGID,
			cacheIcon,
			cacheStatus,
			time.Now().Format("15:04:05 02.01.2006")),
		ParseMode:   models.ParseModeHTML,
		ReplyMarkup: keyboard,
	})

	if err != nil {
		a.log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞", slog.Any("error", err))
	}
}

func (a *App) handleCallbackQuery(ctx context.Context, b *bot.Bot, update *models.Update) {
	callback := update.CallbackQuery

	// –ü–æ–ª—É—á–∞–µ–º chat ID –∏–∑ callback query
	var chatID int64

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É callback.Message –ø–æ–ª–µ Message (–¥–æ—Å—Ç—É–ø–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
	if callback.Message.Message != nil {
		chatID = callback.Message.Message.Chat.ID
	} else {
		a.log.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å chat ID –∏–∑ callback message")
		return
	}

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
	_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: callback.ID,
	})
	if err != nil {
		a.log.Error("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback", slog.Any("error", err))
	}

	switch callback.Data {
	case "status":
		a.sendStatus(ctx, b, chatID)
	case "change_ggid":
		a.handleChangeGGID(ctx, b, chatID)
	case "toggle_cache":
		a.handleToggleCache(ctx, b, chatID)
	}
}

func (a *App) handleTextMessage(ctx context.Context, b *bot.Bot, update *models.Update) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ ggID –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if !a.waitingGGID[update.Message.Chat.ID] {
		return
	}

	// –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
	newGGID, err := strconv.Atoi(update.Message.Text)
	if err != nil || newGGID <= 0 {
		_, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ggID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:",
		})
		if err != nil {
			a.log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ", slog.Any("error", err))
		}
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π ggID
	actualGGID := a.tzService.SetGGID(newGGID)
	a.waitingGGID[update.Message.Chat.ID] = false

	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{Text: "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å", CallbackData: "status"},
			},
		},
	}

	_, err = b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text: fmt.Sprintf(`‚úÖ <b>ggID —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>

üî¢ <b>–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> <code>%d</code>

<i>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Å—Ç—É–ø–∏–ª–æ –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.</i>`, actualGGID),
		ParseMode:   models.ParseModeHTML,
		ReplyMarkup: keyboard,
	})

	if err != nil {
		a.log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", slog.Any("error", err))
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
	a.log.Info("ggID –∏–∑–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ Telegram –±–æ—Ç",
		slog.Int("new_ggid", actualGGID),
		slog.Int64("chat_id", update.Message.Chat.ID))
}

func (a *App) sendStatus(ctx context.Context, b *bot.Bot, chatID int64) {
	currentGGID := a.tzService.GetGGID()
	currentCache := a.tzService.GetUseLlmCache()

	cacheIcon := "‚ùå"
	cacheStatus := "–í—ã–∫–ª—é—á–µ–Ω"
	if currentCache {
		cacheIcon = "‚úÖ"
		cacheStatus = "–í–∫–ª—é—á–µ–Ω"
	}

	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{Text: "üî¢ –ò–∑–º–µ–Ω–∏—Ç—å ggID", CallbackData: "change_ggid"},
				{Text: "üíæ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫—ç—à", CallbackData: "toggle_cache"},
			},
		},
	}

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: chatID,
		Text: fmt.Sprintf(`üìä <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>

üî¢ <b>ggID:</b> <code>%d</code>
%s <b>–ö—ç—à LLM:</b> %s

<i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: %s</i>`,
			currentGGID,
			cacheIcon,
			cacheStatus,
			time.Now().Format("15:04:05 02.01.2006")),
		ParseMode:   models.ParseModeHTML,
		ReplyMarkup: keyboard,
	})

	if err != nil {
		a.log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞", slog.Any("error", err))
	}
}

func (a *App) handleChangeGGID(ctx context.Context, b *bot.Bot, chatID int64) {
	a.waitingGGID[chatID] = true

	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{Text: "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å", CallbackData: "status"},
			},
		},
	}

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: chatID,
		Text: `üî¢ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ ggID</b>

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ggID (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 1, 2, 3, etc.</i>`,
		ParseMode:   models.ParseModeHTML,
		ReplyMarkup: keyboard,
	})

	if err != nil {
		a.log.Error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ggID", slog.Any("error", err))
	}
}

func (a *App) handleToggleCache(ctx context.Context, b *bot.Bot, chatID int64) {
	currentCache := a.tzService.GetUseLlmCache()
	newCache := a.tzService.SetUseLlmCache(!currentCache)

	cacheIcon := "‚ùå"
	cacheStatus := "–≤—ã–∫–ª—é—á–µ–Ω"
	actionIcon := "üî¥"
	if newCache {
		cacheIcon = "‚úÖ"
		cacheStatus = "–≤–∫–ª—é—á–µ–Ω"
		actionIcon = "üü¢"
	}

	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{Text: "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å", CallbackData: "status"},
			},
		},
	}

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: chatID,
		Text: fmt.Sprintf(`%s <b>–ö—ç—à LLM %s!</b>

%s <b>–°—Ç–∞—Ç—É—Å –∫—ç—à–∞:</b> %s

<i>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Å—Ç—É–ø–∏–ª–æ –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.</i>`,
			actionIcon, cacheStatus, cacheIcon, cacheStatus),
		ParseMode:   models.ParseModeHTML,
		ReplyMarkup: keyboard,
	})

	if err != nil {
		a.log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞", slog.Any("error", err))
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
	a.log.Info("–°—Ç–∞—Ç—É—Å –∫—ç—à–∞ LLM –∏–∑–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ Telegram –±–æ—Ç",
		slog.Bool("new_cache_status", newCache),
		slog.Int64("chat_id", chatID))
}

func (a *App) sendStartupMessage() error {
	chatID, err := strconv.ParseInt(a.config.ChatID, 10, 64)
	if err != nil {
		return fmt.Errorf("invalid chat_id format: %w", err)
	}

	currentGGID := a.tzService.GetGGID()
	currentCache := a.tzService.GetUseLlmCache()

	cacheIcon := "‚ùå"
	cacheStatus := "–í—ã–∫–ª—é—á–µ–Ω"
	if currentCache {
		cacheIcon = "‚úÖ"
		cacheStatus = "–í–∫–ª—é—á–µ–Ω"
	}

	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{Text: "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å", CallbackData: "status"},
			},
		},
	}

	_, err = a.bot.SendMessage(context.Background(), &bot.SendMessageParams{
		ChatID: chatID,
		Text: fmt.Sprintf(`üöÄ <b>TZ Bot –∑–∞–ø—É—â–µ–Ω!</b>

üìä <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
üî¢ <b>ggID:</b> <code>%d</code>
%s <b>–ö—ç—à LLM:</b> %s

<i>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: %s</i>

–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! ü§ñ`,
			currentGGID,
			cacheIcon,
			cacheStatus,
			time.Now().Format("15:04:05 02.01.2006")),
		ParseMode:   models.ParseModeHTML,
		ReplyMarkup: keyboard,
	})

	return err
}

func (a *App) sendShutdownMessage() error {
	chatID, err := strconv.ParseInt(a.config.ChatID, 10, 64)
	if err != nil {
		return fmt.Errorf("invalid chat_id format: %w", err)
	}

	_, err = a.bot.SendMessage(context.Background(), &bot.SendMessageParams{
		ChatID: chatID,
		Text: fmt.Sprintf(`üî¥ <b>TZ Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>

<i>–í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: %s</i>`, time.Now().Format("15:04:05 02.01.2006")),
		ParseMode: models.ParseModeHTML,
	})

	return err
}

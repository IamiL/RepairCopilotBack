// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: tz/v1/tz.proto

package tzv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TzService_CheckTz_FullMethodName                      = "/tz.v1.TzService/CheckTz"
	TzService_GetVersionsMe_FullMethodName                = "/tz.v1.TzService/GetVersionsMe"
	TzService_GetAllVersionsAdminDashboard_FullMethodName = "/tz.v1.TzService/GetAllVersionsAdminDashboard"
	TzService_GetVersionStatistics_FullMethodName         = "/tz.v1.TzService/GetVersionStatistics"
	TzService_GetVersion_FullMethodName                   = "/tz.v1.TzService/GetVersion"
	TzService_NewFeedbackError_FullMethodName             = "/tz.v1.TzService/NewFeedbackError"
	TzService_GetVersionsDateRange_FullMethodName         = "/tz.v1.TzService/GetVersionsDateRange"
	TzService_GetDailyAnalytics_FullMethodName            = "/tz.v1.TzService/GetDailyAnalytics"
	TzService_GetFeedbacks_FullMethodName                 = "/tz.v1.TzService/GetFeedbacks"
)

// TzServiceClient is the client API for TzService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TzServiceClient interface {
	CheckTz(ctx context.Context, in *CheckTzRequest, opts ...grpc.CallOption) (*CheckTzResponse, error)
	GetVersionsMe(ctx context.Context, in *GetVersionsMeRequest, opts ...grpc.CallOption) (*GetVersionsMeResponse, error)
	GetAllVersionsAdminDashboard(ctx context.Context, in *GetAllVersionsAdminDashboardRequest, opts ...grpc.CallOption) (*GetAllVersionsAdminDashboardResponse, error)
	GetVersionStatistics(ctx context.Context, in *GetVersionStatisticsRequest, opts ...grpc.CallOption) (*GetVersionStatisticsResponse, error)
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	NewFeedbackError(ctx context.Context, in *NewFeedbackErrorRequest, opts ...grpc.CallOption) (*NewFeedbackErrorResponse, error)
	GetVersionsDateRange(ctx context.Context, in *GetVersionsDateRangeRequest, opts ...grpc.CallOption) (*GetVersionsDateRangeResponse, error)
	GetDailyAnalytics(ctx context.Context, in *GetDailyAnalyticsRequest, opts ...grpc.CallOption) (*GetDailyAnalyticsResponse, error)
	GetFeedbacks(ctx context.Context, in *GetFeedbacksRequest, opts ...grpc.CallOption) (*GetFeedbacksResponse, error)
}

type tzServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTzServiceClient(cc grpc.ClientConnInterface) TzServiceClient {
	return &tzServiceClient{cc}
}

func (c *tzServiceClient) CheckTz(ctx context.Context, in *CheckTzRequest, opts ...grpc.CallOption) (*CheckTzResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckTzResponse)
	err := c.cc.Invoke(ctx, TzService_CheckTz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tzServiceClient) GetVersionsMe(ctx context.Context, in *GetVersionsMeRequest, opts ...grpc.CallOption) (*GetVersionsMeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVersionsMeResponse)
	err := c.cc.Invoke(ctx, TzService_GetVersionsMe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tzServiceClient) GetAllVersionsAdminDashboard(ctx context.Context, in *GetAllVersionsAdminDashboardRequest, opts ...grpc.CallOption) (*GetAllVersionsAdminDashboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllVersionsAdminDashboardResponse)
	err := c.cc.Invoke(ctx, TzService_GetAllVersionsAdminDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tzServiceClient) GetVersionStatistics(ctx context.Context, in *GetVersionStatisticsRequest, opts ...grpc.CallOption) (*GetVersionStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVersionStatisticsResponse)
	err := c.cc.Invoke(ctx, TzService_GetVersionStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tzServiceClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, TzService_GetVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tzServiceClient) NewFeedbackError(ctx context.Context, in *NewFeedbackErrorRequest, opts ...grpc.CallOption) (*NewFeedbackErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewFeedbackErrorResponse)
	err := c.cc.Invoke(ctx, TzService_NewFeedbackError_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tzServiceClient) GetVersionsDateRange(ctx context.Context, in *GetVersionsDateRangeRequest, opts ...grpc.CallOption) (*GetVersionsDateRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVersionsDateRangeResponse)
	err := c.cc.Invoke(ctx, TzService_GetVersionsDateRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tzServiceClient) GetDailyAnalytics(ctx context.Context, in *GetDailyAnalyticsRequest, opts ...grpc.CallOption) (*GetDailyAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDailyAnalyticsResponse)
	err := c.cc.Invoke(ctx, TzService_GetDailyAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tzServiceClient) GetFeedbacks(ctx context.Context, in *GetFeedbacksRequest, opts ...grpc.CallOption) (*GetFeedbacksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeedbacksResponse)
	err := c.cc.Invoke(ctx, TzService_GetFeedbacks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TzServiceServer is the server API for TzService service.
// All implementations must embed UnimplementedTzServiceServer
// for forward compatibility.
type TzServiceServer interface {
	CheckTz(context.Context, *CheckTzRequest) (*CheckTzResponse, error)
	GetVersionsMe(context.Context, *GetVersionsMeRequest) (*GetVersionsMeResponse, error)
	GetAllVersionsAdminDashboard(context.Context, *GetAllVersionsAdminDashboardRequest) (*GetAllVersionsAdminDashboardResponse, error)
	GetVersionStatistics(context.Context, *GetVersionStatisticsRequest) (*GetVersionStatisticsResponse, error)
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	NewFeedbackError(context.Context, *NewFeedbackErrorRequest) (*NewFeedbackErrorResponse, error)
	GetVersionsDateRange(context.Context, *GetVersionsDateRangeRequest) (*GetVersionsDateRangeResponse, error)
	GetDailyAnalytics(context.Context, *GetDailyAnalyticsRequest) (*GetDailyAnalyticsResponse, error)
	GetFeedbacks(context.Context, *GetFeedbacksRequest) (*GetFeedbacksResponse, error)
	mustEmbedUnimplementedTzServiceServer()
}

// UnimplementedTzServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTzServiceServer struct{}

func (UnimplementedTzServiceServer) CheckTz(context.Context, *CheckTzRequest) (*CheckTzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTz not implemented")
}
func (UnimplementedTzServiceServer) GetVersionsMe(context.Context, *GetVersionsMeRequest) (*GetVersionsMeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersionsMe not implemented")
}
func (UnimplementedTzServiceServer) GetAllVersionsAdminDashboard(context.Context, *GetAllVersionsAdminDashboardRequest) (*GetAllVersionsAdminDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVersionsAdminDashboard not implemented")
}
func (UnimplementedTzServiceServer) GetVersionStatistics(context.Context, *GetVersionStatisticsRequest) (*GetVersionStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersionStatistics not implemented")
}
func (UnimplementedTzServiceServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedTzServiceServer) NewFeedbackError(context.Context, *NewFeedbackErrorRequest) (*NewFeedbackErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewFeedbackError not implemented")
}
func (UnimplementedTzServiceServer) GetVersionsDateRange(context.Context, *GetVersionsDateRangeRequest) (*GetVersionsDateRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersionsDateRange not implemented")
}
func (UnimplementedTzServiceServer) GetDailyAnalytics(context.Context, *GetDailyAnalyticsRequest) (*GetDailyAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyAnalytics not implemented")
}
func (UnimplementedTzServiceServer) GetFeedbacks(context.Context, *GetFeedbacksRequest) (*GetFeedbacksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedbacks not implemented")
}
func (UnimplementedTzServiceServer) mustEmbedUnimplementedTzServiceServer() {}
func (UnimplementedTzServiceServer) testEmbeddedByValue()                   {}

// UnsafeTzServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TzServiceServer will
// result in compilation errors.
type UnsafeTzServiceServer interface {
	mustEmbedUnimplementedTzServiceServer()
}

func RegisterTzServiceServer(s grpc.ServiceRegistrar, srv TzServiceServer) {
	// If the following call pancis, it indicates UnimplementedTzServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TzService_ServiceDesc, srv)
}

func _TzService_CheckTz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TzServiceServer).CheckTz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TzService_CheckTz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TzServiceServer).CheckTz(ctx, req.(*CheckTzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TzService_GetVersionsMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionsMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TzServiceServer).GetVersionsMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TzService_GetVersionsMe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TzServiceServer).GetVersionsMe(ctx, req.(*GetVersionsMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TzService_GetAllVersionsAdminDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllVersionsAdminDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TzServiceServer).GetAllVersionsAdminDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TzService_GetAllVersionsAdminDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TzServiceServer).GetAllVersionsAdminDashboard(ctx, req.(*GetAllVersionsAdminDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TzService_GetVersionStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TzServiceServer).GetVersionStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TzService_GetVersionStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TzServiceServer).GetVersionStatistics(ctx, req.(*GetVersionStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TzService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TzServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TzService_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TzServiceServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TzService_NewFeedbackError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFeedbackErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TzServiceServer).NewFeedbackError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TzService_NewFeedbackError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TzServiceServer).NewFeedbackError(ctx, req.(*NewFeedbackErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TzService_GetVersionsDateRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionsDateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TzServiceServer).GetVersionsDateRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TzService_GetVersionsDateRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TzServiceServer).GetVersionsDateRange(ctx, req.(*GetVersionsDateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TzService_GetDailyAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TzServiceServer).GetDailyAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TzService_GetDailyAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TzServiceServer).GetDailyAnalytics(ctx, req.(*GetDailyAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TzService_GetFeedbacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedbacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TzServiceServer).GetFeedbacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TzService_GetFeedbacks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TzServiceServer).GetFeedbacks(ctx, req.(*GetFeedbacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TzService_ServiceDesc is the grpc.ServiceDesc for TzService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TzService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tz.v1.TzService",
	HandlerType: (*TzServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckTz",
			Handler:    _TzService_CheckTz_Handler,
		},
		{
			MethodName: "GetVersionsMe",
			Handler:    _TzService_GetVersionsMe_Handler,
		},
		{
			MethodName: "GetAllVersionsAdminDashboard",
			Handler:    _TzService_GetAllVersionsAdminDashboard_Handler,
		},
		{
			MethodName: "GetVersionStatistics",
			Handler:    _TzService_GetVersionStatistics_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _TzService_GetVersion_Handler,
		},
		{
			MethodName: "NewFeedbackError",
			Handler:    _TzService_NewFeedbackError_Handler,
		},
		{
			MethodName: "GetVersionsDateRange",
			Handler:    _TzService_GetVersionsDateRange_Handler,
		},
		{
			MethodName: "GetDailyAnalytics",
			Handler:    _TzService_GetDailyAnalytics_Handler,
		},
		{
			MethodName: "GetFeedbacks",
			Handler:    _TzService_GetFeedbacks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tz/v1/tz.proto",
}

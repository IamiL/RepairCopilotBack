package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strings"
	"time"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
)

// DBConfig —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
type DBConfig struct {
	Host     string `json:"host"`
	Port     int    `json:"port"`
	Database string `json:"database"`
	Username string `json:"username"`
	Password string `json:"password"`
}

// MigrationConfig —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–¥–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
type MigrationConfig struct {
	Name   string   `json:"name"`
	Source DBConfig `json:"source"`
	Target DBConfig `json:"target"`
}

// Config —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
type Config struct {
	Migrations []MigrationConfig `json:"migrations"`
}

func main() {
	log.Println("===== –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö PostgreSQL =====")
	log.Printf("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: %s\n", time.Now().Format("2006-01-02 15:04:05"))

	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	config, err := loadConfig("migration-tool/config.json")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}

	log.Printf("–ó–∞–≥—Ä—É–∂–µ–Ω–æ %d –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n", len(config.Migrations))

	// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
	for i, migration := range config.Migrations {
		log.Printf("\n[%d/%d] –ú–∏–≥—Ä–∞—Ü–∏—è: %s", i+1, len(config.Migrations), migration.Name)
		log.Println(strings.Repeat("=", 60))

		if err := migrateDatabases(migration); err != nil {
			log.Printf("‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ %s: %v\n", migration.Name, err)
			log.Println("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–≥—Ä–∞—Ü–∏–µ–π...")
			continue
		}

		log.Printf("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è %s —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n", migration.Name)
	}

	log.Println("\n===== –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ =====")
	log.Printf("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: %s\n", time.Now().Format("2006-01-02 15:04:05"))
}

func loadConfig(filename string) (*Config, error) {
	data, err := os.ReadFile(filename)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %w", err)
	}

	var config Config
	if err := json.Unmarshal(data, &config); err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON: %w", err)
	}

	return &config, nil
}

func buildConnectionString(cfg DBConfig, readOnly bool) string {
	connStr := fmt.Sprintf(
		"host=%s port=%d dbname=%s user=%s password=%s sslmode=disable",
		cfg.Host, cfg.Port, cfg.Database, cfg.Username, cfg.Password,
	)

	if readOnly {
		connStr += " default_transaction_read_only=on"
	}

	return connStr
}

func migrateDatabases(migration MigrationConfig) error {
	ctx := context.Background()

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É (READ-ONLY)
	log.Printf("üì• –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É: %s:%d/%s (READ-ONLY)...",
		migration.Source.Host, migration.Source.Port, migration.Source.Database)

	sourceConnStr := buildConnectionString(migration.Source, true)
	sourcePool, err := pgxpool.New(ctx, sourceConnStr)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É: %w", err)
	}
	defer sourcePool.Close()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É
	if err := sourcePool.Ping(ctx); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É: %w", err)
	}
	log.Println("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–π –ë–î
	log.Printf("üì§ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–π –ë–î: %s:%d/%s...",
		migration.Target.Host, migration.Target.Port, migration.Target.Database)

	targetConnStr := buildConnectionString(migration.Target, false)
	targetPool, err := pgxpool.New(ctx, targetConnStr)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ü–µ–ª–µ–≤–æ–π –ë–î: %w", err)
	}
	defer targetPool.Close()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ü–µ–ª–µ–≤–æ–π –ë–î
	if err := targetPool.Ping(ctx); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–π –ë–î: %w", err)
	}
	log.Println("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–π –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
	tables, err := getTables(ctx, sourcePool)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü: %w", err)
	}

	if len(tables) == 0 {
		log.Println("‚ö†Ô∏è  –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
		return nil
	}

	log.Printf("üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: %d\n", len(tables))

	// –ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
	for i, table := range tables {
		log.Printf("\n[%d/%d] –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã: %s", i+1, len(tables), table)

		if err := migrateTable(ctx, sourcePool, targetPool, table); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã %s: %v", table, err)
			log.Println("‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã...")
			continue
		}

		log.Printf("‚úÖ –¢–∞–±–ª–∏—Ü–∞ %s —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞", table)
	}

	return nil
}

func getTables(ctx context.Context, pool *pgxpool.Pool) ([]string, error) {
	query := `
		SELECT tablename
		FROM pg_tables
		WHERE schemaname = 'public'
		ORDER BY tablename
	`

	rows, err := pool.Query(ctx, query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var tables []string
	for rows.Next() {
		var tableName string
		if err := rows.Scan(&tableName); err != nil {
			return nil, err
		}
		tables = append(tables, tableName)
	}

	return tables, rows.Err()
}

func migrateTable(ctx context.Context, source, target *pgxpool.Pool, tableName string) error {
	// –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ
	var sourceCount int64
	err := source.QueryRow(ctx, fmt.Sprintf("SELECT COUNT(*) FROM %s", pgx.Identifier{tableName}.Sanitize())).Scan(&sourceCount)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ: %w", err)
	}

	log.Printf("  üìä –°—Ç—Ä–æ–∫ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ: %d", sourceCount)

	if sourceCount == 0 {
		log.Println("  ‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
		return nil
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –≤ —Ü–µ–ª–µ–≤–æ–π –ë–î
	var targetTableExists bool
	err = target.QueryRow(ctx, `
		SELECT EXISTS (
			SELECT FROM pg_tables
			WHERE schemaname = 'public' AND tablename = $1
		)
	`, tableName).Scan(&targetTableExists)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Ü–µ–ª–µ–≤–æ–π –ë–î: %w", err)
	}

	if !targetTableExists {
		log.Printf("  ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ %s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ü–µ–ª–µ–≤–æ–π –ë–î, —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É...", tableName)
		if err := copyTableStructure(ctx, source, target, tableName); err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã: %w", err)
		}
		log.Println("  ‚úì –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω–∞")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –æ–¥–∏–Ω —Ä–∞–∑
	var columnNames []string
	columnsQuery := `
		SELECT column_name
		FROM information_schema.columns
		WHERE table_schema = 'public' AND table_name = $1
		ORDER BY ordinal_position
	`
	colRows, err := source.Query(ctx, columnsQuery, tableName)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫: %w", err)
	}
	for colRows.Next() {
		var colName string
		if err := colRows.Scan(&colName); err != nil {
			colRows.Close()
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–º—è –∫–æ–ª–æ–Ω–∫–∏: %w", err)
		}
		columnNames = append(columnNames, colName)
	}
	colRows.Close()

	if len(columnNames) == 0 {
		return fmt.Errorf("—Ç–∞–±–ª–∏—Ü–∞ %s –Ω–µ –∏–º–µ–µ—Ç –∫–æ–ª–æ–Ω–æ–∫", tableName)
	}

	// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ INSERT –∑–∞–ø—Ä–æ—Å–∞
	placeholders := make([]string, len(columnNames))
	for i := range placeholders {
		placeholders[i] = fmt.Sprintf("$%d", i+1)
	}

	insertQuery := fmt.Sprintf(
		"INSERT INTO %s (%s) VALUES (%s) ON CONFLICT DO NOTHING",
		pgx.Identifier{tableName}.Sanitize(),
		strings.Join(columnNames, ", "),
		strings.Join(placeholders, ", "),
	)

	// –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –±–∞—Ç—á–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–æ–≤
	//const batchSize = 5 // –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è (–¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä)
	batchSize := int64(100)
	if tableName == "versions" {
		batchSize = 2
	}
	var totalInserted int64

	for offset := int64(0); offset < sourceCount; offset += batchSize {
		// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ü–∏—è–º–∏ —Å LIMIT/OFFSET
		query := fmt.Sprintf(
			"SELECT * FROM %s ORDER BY ctid LIMIT %d OFFSET %d",
			pgx.Identifier{tableName}.Sanitize(),
			batchSize,
			offset,
		)

		rows, err := source.Query(ctx, query)
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å SELECT (offset %d): %w", offset, err)
		}

		// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞
		batch := &pgx.Batch{}
		rowCount := 0

		for rows.Next() {
			values, err := rows.Values()
			if err != nil {
				rows.Close()
				return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ (offset %d): %w", offset, err)
			}

			batch.Queue(insertQuery, values...)
			rowCount++
		}

		rows.Close()

		if err := rows.Err(); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫ (offset %d): %w", offset, err)
		}

		// –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å—Ç–∞–≤–∫—É –±–∞—Ç—á–∞
		if batch.Len() > 0 {
			results := target.SendBatch(ctx, batch)
			for i := 0; i < batch.Len(); i++ {
				_, err := results.Exec()
				if err != nil {
					results.Close()
					return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å INSERT (offset %d): %w", offset, err)
				}
			}
			results.Close()
			totalInserted += int64(batch.Len())
		}

		log.Printf("  ‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: %d/%d —Å—Ç—Ä–æ–∫ (%.1f%%)",
			totalInserted, sourceCount, float64(totalInserted)/float64(sourceCount)*100)

		// –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —Å—Ç—Ä–æ–∫, —á–µ–º –æ–∂–∏–¥–∞–ª–∏ - –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Ç–∞–±–ª–∏—Ü—ã
		if rowCount < int(batchSize) {
			break
		}
	}

	log.Printf("  ‚úì –í—Å—Ç–∞–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: %d", totalInserted)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –≤ —Ü–µ–ª–µ–≤–æ–π –ë–î
	var targetCount int64
	err = target.QueryRow(ctx, fmt.Sprintf("SELECT COUNT(*) FROM %s", pgx.Identifier{tableName}.Sanitize())).Scan(&targetCount)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –≤ —Ü–µ–ª–µ–≤–æ–π –ë–î: %w", err)
	}

	log.Printf("  üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ü–µ–ª–µ–≤–æ–π –ë–î: %d", targetCount)

	return nil
}

func copyTableStructure(ctx context.Context, source, target *pgxpool.Pool, tableName string) error {
	// –ü–æ–ª—É—á–∞–µ–º DDL —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
	query := `
		SELECT
			'CREATE TABLE ' || $1 || ' (' ||
			string_agg(
				column_name || ' ' || data_type ||
				CASE
					WHEN character_maximum_length IS NOT NULL
					THEN '(' || character_maximum_length || ')'
					ELSE ''
				END ||
				CASE WHEN is_nullable = 'NO' THEN ' NOT NULL' ELSE '' END,
				', '
			) || ')'
		FROM information_schema.columns
		WHERE table_schema = 'public' AND table_name = $1
		GROUP BY table_name
	`

	var createTableSQL string
	err := source.QueryRow(ctx, query, tableName).Scan(&createTableSQL)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ —Ü–µ–ª–µ–≤–æ–π –ë–î
	_, err = target.Exec(ctx, createTableSQL)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É: %w", err)
	}

	return nil
}
